# version: 2.1

# orbs:
#   node: circleci/node@4.1
#   heroku: circleci/heroku@1.2.6

# jobs:
#   build:
#     docker:
#       - image: circleci/node:16.13.0
#     working_directory: ~/repo
#     steps:
#       - checkout
#       # install dependencies
#       - run:
#           name: Install Dependencies
#           command: npm install
#       - run:
#           name: Run tests
#           command: npm run test

# workflows:
#   heroku_deploy:
#     jobs:
#       - build
#       - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
#           requires:
#             - build
#           filters:
#             branches:
#               only: main
# version: 2.1
# orbs:
#   heroku: circleci/heroku@1.2.6
# workflows:
#   heroku_deploy:
#     jobs:
#       - heroku/deploy-via-git

# # Use the latest 2.1 version of CircleCI pipeline  engine.
# # See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/2.0/orb-intro/
# orbs:
#   node: circleci/node@4.1
#   # The heroku orb contains a set of prepackaged CircleCI configuration you can utilize to deploy applications to heroku
#   # Orbs reduce the amount of configuration required for common tasks.
#   # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/heroku
#   # NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
#   # See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
#   heroku: circleci/heroku@1.2

# workflows:
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - node/test
#       - heroku/deploy-via-git:
#           force: true # this parameter instructs the push to use a force flag when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git
#           requires:
#             - node/test # only run deploy-via-git job if the build job has completed
#           filters:
#             branches:
#               # This sample config runs this job on any branch matching the regex below, however, it's more likely you want to only run this job on master.
#               only: master # Uncomment this line

# executors:
#   node:
#     docker:
#       - image: circleci/node:14

# aliases:
#   restore_cache: &restore_cache
#     restore_cache:
#       name: Restore Npm Package Cache
#       keys:
#         - yarn-cache-netlify-{{ checksum "yarn.lock" }}

#   install_node_modules: &install_node_modules
#     run:
#       name: Install dependencies
#       command: yarn

#   save_cache: &save_cache
#     save_cache:
#       name: Save NPM package cache
#       key: yarn-cache-netlify-{{ checksum "yarn.lock" }}
#       paths:
#         - ./node_modules

# version: 2.1

# jobs:
#   test:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - <<: *save_cache
#       - run:
#           name: Test
#           command: yarn test

#   build:
#     executor: node
#     steps:
#       - checkout
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - run:
#           name: Build
#           command: yarn build
#       - persist_to_workspace:
#           root: ./
#           paths:
#             - public

#   deploy:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ./
#       - <<: *restore_cache
#       - <<: *install_node_modules
#       - run:
#           name: Install netlify-cli
#           command: sudo npm install --unsafe-perm=true -g --silent netlify-cli
#       - run:
#           name: Deploy to Netlify
#           command: netlify deploy --dir=./public -p

# workflows:
#   version: 2
#   build_and_deploy:
#     jobs:
#       - test:
#           filters:
#             branches:
#               ignore:
#                 - gh-pages
#       - build:
#           requires:
#             - test
#       - deploy:
#           requires:
#             - build
#           filters:
#             branches:
#               only: master

# version: 2.1

# jobs:
#   build:
#     working_directory: ~/repo
#     docker:
#       - image: circleci/node:16.13.0
#     steps:
#       - checkout
#       - run:
#           name: Update NPM
#           command: 'sudo npm install -g npm'
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package-lock.json" }}
#       - run:
#           name: Install Dependencies
#           command: npm install
#       - save_cache:
#           key: dependency-cache-{{ checksum "package-lock.json" }}
#           paths:
#             - ./node_modules
#       - run:
#           name: build
#           command: npm run build
#       - save_cache:
#           key: cra-public-cache-{{ .Branch }}
#           paths:
#             - ./public
#       - run:
#           name: Deploy to Netlify
#           command: ./node_modules/.bin/netlify deploy --dir=public -p

# workflows:
#   version: 2
#   build-deploy:
#     jobs:
#       - build:
#           filters:
#             branches:
#               only:
#                 - main

version: 2.1

orbs:
  node: circleci/node@4.1

jobs:
  build:
    docker:
      - image: node:16.13.0

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: npminstall

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: npm run test

      - run: npm run build

      - run: npm netlify:deploy

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
